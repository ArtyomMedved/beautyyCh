const express = require("express");
const path = require("path");
const fs = require("fs");
const mysql = require("mysql2/promise");
const bcrypt = require("bcryptjs");
const cookieParser = require("cookie-parser");
const crypto = require("crypto");
const { sendCode } = require("./mailer");
const multer = require("multer");

const app = express();
const PORT = 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "public/avatars"); // —É–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–∞ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  },
  filename: (req, file, cb) => {
    const uniqueName = Date.now() + "-" + file.originalname;
    cb(null, uniqueName);
  },
});

const upload = multer({ storage });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
const db = mysql.createPool({
  host: "localhost",
  user: "admin",
  password: "AdminPass456!",
  database: "exampledb",
});

// Middleware
app.use(express.static("public"));
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(cookieParser());

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
const templatesDir = path.join(__dirname, "templates");
app.get("/", (req, res) => res.sendFile(path.join(templatesDir, "index.html")));
fs.readdirSync(templatesDir).forEach((file) => {
  if (file.endsWith(".html") && file !== "index.html") {
    const route = "/" + file.replace(".html", "");
    app.get(route, (req, res) => {
      res.sendFile(path.join(templatesDir, file));
    });
  }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 2-—Ö —Ñ–∞–∫—Ç–æ—Ä–∫–∏
function generateCode() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
function generateToken() {
  return crypto.randomBytes(32).toString("hex");
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post("/register", upload.single("avatar"), async (req, res) => {
  const { name, email, password } = req.body;

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const [existing] = await db.query("SELECT id FROM users WHERE email = ?", [
      email,
    ]);
    if (existing.length > 0)
      return res.status(400).send("Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");

    const code = generateCode();

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ email
    await db.query("DELETE FROM email_verification_codes WHERE email = ?", [
      email,
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    await db.query(
      "INSERT INTO email_verification_codes (email, code, purpose) VALUES (?, ?, ?)",
      [email, code, "register"]
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É
    await sendCode(email, code);

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    fs.appendFile("user_actions.log", `[${new Date().toISOString()}] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${email}\n`, () => {});
    res.redirect(
      `/auth_code?email=${encodeURIComponent(
        email
      )}&purpose=register&name=${encodeURIComponent(
        name
      )}&password=${encodeURIComponent(password)}`
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    const [rows] = await db.query("SELECT * FROM users WHERE email = ?", [
      email,
    ]);
    if (rows.length === 0)
      return res.status(401).send("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");

    const user = rows[0];
    const match = await bcrypt.compare(password, user.password);
    if (!match) return res.status(401).send("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");

    const code = generateCode();

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ email
    await db.query("DELETE FROM email_verification_codes WHERE email = ?", [
      email,
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    await db.query(
      "INSERT INTO email_verification_codes (email, code, purpose) VALUES (?, ?, ?)",
      [email, code, "login"]
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É
    await sendCode(email, code);

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    fs.appendFile("user_actions.log", `[${new Date().toISOString()}] –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: ${email}\n`, () => {});
    res.redirect(
      `/auth_code?email=${encodeURIComponent(email)}&purpose=login`
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
    res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
});

// 2-—Ö —Ñ–∞–∫—Ç–æ—Ä–∫–∞
app.post("/verify-code", async (req, res) => {
  const { code, email, purpose, name, password } = req.body;

  const [rows] = await db.query(
    "SELECT * FROM email_verification_codes WHERE email = ? AND code = ? AND purpose = ? AND created_at >= NOW() - INTERVAL 10 MINUTE",
    [email, code, purpose]
  );

  if (rows.length === 0)
    return res.status(400).send("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥");

  await db.query(
    "DELETE FROM email_verification_codes WHERE email = ? AND purpose = ?",
    [email, purpose]
  );

  if (purpose === "register") {
    const hashedPassword = await bcrypt.hash(password, 10);
    const sessionToken = generateToken();
    await db.query(
      "INSERT INTO users (name, email, password, avatar, session_token) VALUES (?, ?, ?, ?, ?)",
      [name, email, hashedPassword, "avatars/default.jpg", sessionToken]
    );
    res.cookie("session", sessionToken, {
      httpOnly: true,
      secure: true,
      sameSite: "strict",
      maxAge: 604800000,
    });
    fs.appendFile("user_actions.log", `[${new Date().toISOString()}] –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${email}\n`, () => {});
    return res.redirect("/");
  } else if (purpose === "login") {
    const [userRows] = await db.query("SELECT id FROM users WHERE email = ?", [
      email,
    ]);
    if (userRows.length === 0)
      return res.status(404).send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");

    const sessionToken = generateToken();
    await db.query("UPDATE users SET session_token = ? WHERE id = ?", [
      sessionToken,
      userRows[0].id,
    ]);
    res.cookie("session", sessionToken, {
      httpOnly: true,
      secure: true,
      sameSite: "strict",
      maxAge: 604800000,
    });
    fs.appendFile("user_actions.log", `[${new Date().toISOString()}] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: ${email}\n`, () => {});
    return res.redirect("/");
  }
});

// –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø—Ä–æ—Ñ–∏–ª—è
app.get("/profile", async (req, res) => {
  const sessionToken = req.cookies.session;
  if (!sessionToken) return res.status(401).send("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã");

  try {
    const [rows] = await db.query(
      "SELECT id, name, email, avatar FROM users WHERE session_token = ?",
      [sessionToken]
    );
    if (rows.length === 0)
      return res.status(401).send("–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞");

    const user = rows[0];
    res.json(user);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", err);
    res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    await db.query("SELECT 1");
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.");
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: http://localhost:${PORT}`);
    });    
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err.message);
    process.exit(1);
  }
}

startServer();
